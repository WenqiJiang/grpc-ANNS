# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import keyvaluestore_pb2 as keyvaluestore__pb2


class KeyValueStoreStub(object):
    """A simple key-value storage service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetValues = channel.unary_unary(
                '/keyvaluestore.KeyValueStore/GetValues',
                request_serializer=keyvaluestore__pb2.LookupRequest.SerializeToString,
                response_deserializer=keyvaluestore__pb2.LookupResponse.FromString,
                )
        self.InsertValues = channel.unary_unary(
                '/keyvaluestore.KeyValueStore/InsertValues',
                request_serializer=keyvaluestore__pb2.KVPair.SerializeToString,
                response_deserializer=keyvaluestore__pb2.ResponseCode.FromString,
                )


class KeyValueStoreServicer(object):
    """A simple key-value storage service
    """

    def GetValues(self, request, context):
        """Provides a value for each key request
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertValues(self, request, context):
        """
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KeyValueStoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetValues': grpc.unary_unary_rpc_method_handler(
                    servicer.GetValues,
                    request_deserializer=keyvaluestore__pb2.LookupRequest.FromString,
                    response_serializer=keyvaluestore__pb2.LookupResponse.SerializeToString,
            ),
            'InsertValues': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertValues,
                    request_deserializer=keyvaluestore__pb2.KVPair.FromString,
                    response_serializer=keyvaluestore__pb2.ResponseCode.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'keyvaluestore.KeyValueStore', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KeyValueStore(object):
    """A simple key-value storage service
    """

    @staticmethod
    def GetValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/keyvaluestore.KeyValueStore/GetValues',
            keyvaluestore__pb2.LookupRequest.SerializeToString,
            keyvaluestore__pb2.LookupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InsertValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/keyvaluestore.KeyValueStore/InsertValues',
            keyvaluestore__pb2.KVPair.SerializeToString,
            keyvaluestore__pb2.ResponseCode.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
